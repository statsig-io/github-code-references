"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var ConfigSpec_1 = require("./ConfigSpec");
var Diagnostics_1 = require("./Diagnostics");
var Errors_1 = require("./Errors");
var IDataAdapter_1 = require("./interfaces/IDataAdapter");
var OutputLogger_1 = __importDefault(require("./OutputLogger"));
var core_1 = require("./utils/core");
var IDListUtil_1 = __importDefault(require("./utils/IDListUtil"));
var safeFetch_1 = __importDefault(require("./utils/safeFetch"));
var getStatsigMetadata = require('./utils/core').getStatsigMetadata;
var SYNC_OUTDATED_MAX = 120 * 1000;
var SpecStore = /** @class */ (function () {
    function SpecStore(fetcher, options, diagnostics) {
        var _a;
        this.syncFailureCount = 0;
        this.lastDownloadConfigSpecsSyncTime = Date.now();
        this.samplingRates = {
            dcs: 0,
            log: 0,
            idlist: 0,
            initialize: Diagnostics_1.MAX_SAMPLING_RATE
        };
        this.outputLogger = OutputLogger_1["default"].getLogger();
        this.fetcher = fetcher;
        this.api = options.api;
        this.apiForDownloadConfigSpecs = options.apiForDownloadConfigSpecs;
        this.rulesUpdatedCallback = (_a = options.rulesUpdatedCallback) !== null && _a !== void 0 ? _a : null;
        this.lastUpdateTime = 0;
        this.initialUpdateTime = 0;
        this.store = {
            gates: {},
            configs: {},
            idLists: {},
            layers: {},
            experimentToLayer: {}
        };
        this.syncInterval = options.rulesetsSyncIntervalMs;
        this.idListSyncInterval = options.idListsSyncIntervalMs;
        this.initialized = false;
        this.syncTimer = null;
        this.idListsSyncTimer = null;
        this.dataAdapter = options.dataAdapter;
        this.initReason = 'Uninitialized';
        this.diagnostics = diagnostics;
        this.bootstrapValues = options.bootstrapValues;
        this.initStrategyForIDLists = options.initStrategyForIDLists;
    }
    SpecStore.prototype.getInitReason = function () {
        return this.initReason;
    };
    SpecStore.prototype.getInitialUpdateTime = function () {
        return this.initialUpdateTime;
    };
    SpecStore.prototype.getLastUpdateTime = function () {
        return this.lastUpdateTime;
    };
    SpecStore.prototype.getGate = function (gateName) {
        var _a;
        return (_a = this.store.gates[gateName]) !== null && _a !== void 0 ? _a : null;
    };
    SpecStore.prototype.getConfig = function (configName) {
        var _a;
        return (_a = this.store.configs[configName]) !== null && _a !== void 0 ? _a : null;
    };
    SpecStore.prototype.getLayer = function (layerName) {
        var _a;
        return (_a = this.store.layers[layerName]) !== null && _a !== void 0 ? _a : null;
    };
    SpecStore.prototype.getExperimentLayer = function (experimentName) {
        var _a;
        return (_a = this.store.experimentToLayer[experimentName]) !== null && _a !== void 0 ? _a : null;
    };
    SpecStore.prototype.getIDList = function (listName) {
        var _a;
        return (_a = this.store.idLists[listName]) !== null && _a !== void 0 ? _a : null;
    };
    SpecStore.prototype.getAllGates = function () {
        return this.store.gates;
    };
    SpecStore.prototype.getAllConfigs = function () {
        return this.store.configs;
    };
    SpecStore.prototype.getAllLayers = function () {
        return this.store.layers;
    };
    SpecStore.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var specsJSON, adapter;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        specsJSON = null;
                        if (this.bootstrapValues != null) {
                            if (this.dataAdapter != null) {
                                this.outputLogger.error('statsigSDK::initialize> Conflict between bootstrap and adapter. Defaulting to adapter.');
                            }
                            else {
                                try {
                                    this.addDiagnosticsMarker('bootstrap', 'start', { step: 'process' });
                                    specsJSON = JSON.parse(this.bootstrapValues);
                                    if (this._process(specsJSON)) {
                                        this.initReason = 'Bootstrap';
                                    }
                                    this.setInitialUpdateTime();
                                }
                                catch (e) {
                                    this.outputLogger.error('statsigSDK::initialize> the provided bootstrapValues is not a valid JSON string.');
                                }
                                this.addDiagnosticsMarker('bootstrap', 'end', {
                                    step: 'process',
                                    value: this.initReason === 'Bootstrap'
                                });
                            }
                        }
                        adapter = this.dataAdapter;
                        if (!adapter) return [3 /*break*/, 2];
                        return [4 /*yield*/, adapter.initialize()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!(this.initReason === 'Bootstrap')) return [3 /*break*/, 3];
                        this._syncValues();
                        return [3 /*break*/, 8];
                    case 3:
                        if (!adapter) return [3 /*break*/, 5];
                        return [4 /*yield*/, this._fetchConfigSpecsFromAdapter()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        if (!(this.lastUpdateTime === 0)) return [3 /*break*/, 7];
                        return [4 /*yield*/, this._syncValues(true)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        this.setInitialUpdateTime();
                        _a.label = 8;
                    case 8:
                        if (!(this.initStrategyForIDLists === 'lazy')) return [3 /*break*/, 9];
                        setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this._initIDLists()];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, 0);
                        return [3 /*break*/, 11];
                    case 9:
                        if (!(this.initStrategyForIDLists !== 'none')) return [3 /*break*/, 11];
                        return [4 /*yield*/, this._initIDLists()];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11:
                        this.pollForUpdates();
                        this.initialized = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    SpecStore.prototype._initIDLists = function () {
        return __awaiter(this, void 0, void 0, function () {
            var adapter, bootstrapIdLists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        adapter = this.dataAdapter;
                        return [4 /*yield*/, (adapter === null || adapter === void 0 ? void 0 : adapter.get(IDataAdapter_1.DataAdapterKey.IDLists))];
                    case 1:
                        bootstrapIdLists = _a.sent();
                        if (!(adapter && typeof (bootstrapIdLists === null || bootstrapIdLists === void 0 ? void 0 : bootstrapIdLists.result) === 'string')) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.syncIdListsFromDataAdapter(adapter, bootstrapIdLists.result)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.syncIdListsFromNetwork()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SpecStore.prototype.resetSyncTimerIfExited = function () {
        if (this.lastDownloadConfigSpecsSyncTime >=
            Date.now() - SYNC_OUTDATED_MAX) {
            return null;
        }
        this.clearTimers();
        this.pollForUpdates();
        var message = "Force reset sync timer. Last update time: ".concat(this.lastDownloadConfigSpecsSyncTime, ", now: ").concat(Date.now());
        this._fetchConfigSpecsFromServer();
        return new Error(message);
    };
    SpecStore.prototype.isServingChecks = function () {
        return this.lastUpdateTime !== 0;
    };
    SpecStore.prototype.getResponseCodeFromError = function (e) {
        if (!(e instanceof Error)) {
            return undefined;
        }
        var arr = e.message.split(' ');
        var statusString = arr.length === 0 ? undefined : arr[arr.length - 1];
        var status = parseInt(statusString !== null && statusString !== void 0 ? statusString : 'NaN');
        return isNaN(status) ? undefined : status;
    };
    SpecStore.prototype._fetchConfigSpecsFromServer = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var response, error, url, e_1, status, specsString, processResult;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        this.lastDownloadConfigSpecsSyncTime = Date.now();
                        this.addDiagnosticsMarker('download_config_specs', 'start', {
                            step: 'network_request'
                        });
                        response = undefined;
                        error = undefined;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        url = ((_a = this.apiForDownloadConfigSpecs) !== null && _a !== void 0 ? _a : this.api) + '/download_config_specs';
                        return [4 /*yield*/, this.fetcher.post(url, {
                                statsigMetadata: getStatsigMetadata(),
                                sinceTime: this.lastUpdateTime
                            })];
                    case 2:
                        response = _b.sent();
                        return [3 /*break*/, 5];
                    case 3:
                        e_1 = _b.sent();
                        error = e_1;
                        return [3 /*break*/, 5];
                    case 4:
                        status = response
                            ? response.status
                            : this.getResponseCodeFromError(error);
                        this.addDiagnosticsMarker('download_config_specs', 'end', {
                            step: 'network_request',
                            value: status !== null && status !== void 0 ? status : false
                        });
                        if (error) {
                            throw error;
                        }
                        if (!response) {
                            return [2 /*return*/];
                        }
                        return [7 /*endfinally*/];
                    case 5:
                        this.addDiagnosticsMarker('download_config_specs', 'start', {
                            step: 'process'
                        });
                        return [4 /*yield*/, response.text()];
                    case 6:
                        specsString = _b.sent();
                        processResult = this._process(JSON.parse(specsString));
                        if (!processResult) {
                            return [2 /*return*/];
                        }
                        this.initReason = 'Network';
                        if (this.rulesUpdatedCallback != null &&
                            typeof this.rulesUpdatedCallback === 'function') {
                            this.rulesUpdatedCallback(specsString, this.lastUpdateTime);
                        }
                        this._saveConfigSpecsToAdapter(specsString);
                        this.addDiagnosticsMarker('download_config_specs', 'end', {
                            step: 'process',
                            value: this.initReason === 'Network'
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    SpecStore.prototype._fetchConfigSpecsFromAdapter = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, result, error, time, configSpecs;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.dataAdapter) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.dataAdapter.get(IDataAdapter_1.DataAdapterKey.Rulesets)];
                    case 1:
                        _a = _b.sent(), result = _a.result, error = _a.error, time = _a.time;
                        if (result && !error) {
                            configSpecs = JSON.parse(result);
                            if (this._process(configSpecs)) {
                                this.initReason = 'DataAdapter';
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    SpecStore.prototype._saveConfigSpecsToAdapter = function (specString) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.dataAdapter) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.dataAdapter.set(IDataAdapter_1.DataAdapterKey.Rulesets, specString, this.lastUpdateTime)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SpecStore.prototype.pollForUpdates = function () {
        var _this = this;
        if (this.syncTimer == null) {
            this.syncTimer = (0, core_1.poll)(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._syncValues()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); }, this.syncInterval);
        }
        if (this.idListsSyncTimer == null) {
            this.idListsSyncTimer = (0, core_1.poll)(function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this._syncIdLists()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); }, this.idListSyncInterval);
        }
    };
    SpecStore.prototype.addDiagnosticsMarker = function (key, action, optionalArgs) {
        var _a = optionalArgs !== null && optionalArgs !== void 0 ? optionalArgs : {}, step = _a.step, value = _a.value, metadata = _a.metadata;
        var context = this.initialized ? 'config_sync' : 'initialize';
        this.diagnostics.mark(context, key, action, step, value, metadata);
    };
    SpecStore.prototype.logDiagnostics = function (context, type) {
        if (this.initialized && context === 'config_sync') {
            this.diagnostics.logDiagnostics('config_sync', {
                type: type,
                samplingRates: this.samplingRates
            });
        }
        else if (this.initialized && context === 'initialize') {
            this.diagnostics.logDiagnostics('initialize', {
                type: 'initialize',
                samplingRates: this.samplingRates
            });
        }
    };
    SpecStore.prototype._syncValues = function (isColdStart) {
        var _a;
        if (isColdStart === void 0) { isColdStart = false; }
        return __awaiter(this, void 0, void 0, function () {
            var adapter, shouldSyncFromAdapter, e_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        adapter = this.dataAdapter;
                        shouldSyncFromAdapter = ((_a = adapter === null || adapter === void 0 ? void 0 : adapter.supportsPollingUpdatesFor) === null || _a === void 0 ? void 0 : _a.call(adapter, IDataAdapter_1.DataAdapterKey.Rulesets)) === true;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        if (!shouldSyncFromAdapter) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._fetchConfigSpecsFromAdapter()];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this._fetchConfigSpecsFromServer()];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        this.syncFailureCount = 0;
                        return [3 /*break*/, 8];
                    case 6:
                        e_2 = _b.sent();
                        this.syncFailureCount++;
                        if (!(e_2 instanceof Errors_1.StatsigLocalModeNetworkError)) {
                            if (isColdStart) {
                                this.outputLogger.error('statsigSDK::initialize> Failed to initialize from the network.  See https://docs.statsig.com/messages/serverSDKConnection for more information');
                            }
                            else if (this.syncFailureCount * this.syncInterval >
                                SYNC_OUTDATED_MAX) {
                                this.outputLogger.warn("statsigSDK::sync> Syncing the server SDK with ".concat(shouldSyncFromAdapter ? 'the data adapter' : 'statsig', " has failed for  ").concat(this.syncFailureCount * this.syncInterval, "ms.  Your sdk will continue to serve gate/config/experiment definitions as of the last successful sync.  See https://docs.statsig.com/messages/serverSDKConnection for more information"));
                                this.syncFailureCount = 0;
                            }
                        }
                        return [3 /*break*/, 8];
                    case 7:
                        this.logDiagnostics('config_sync', 'config_spec');
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    SpecStore.prototype._syncIdLists = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var adapter, shouldSyncFromAdapter, adapterIdLists;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.initStrategyForIDLists === 'none') {
                            return [2 /*return*/];
                        }
                        adapter = this.dataAdapter;
                        shouldSyncFromAdapter = ((_a = adapter === null || adapter === void 0 ? void 0 : adapter.supportsPollingUpdatesFor) === null || _a === void 0 ? void 0 : _a.call(adapter, IDataAdapter_1.DataAdapterKey.IDLists)) === true;
                        return [4 /*yield*/, (adapter === null || adapter === void 0 ? void 0 : adapter.get(IDataAdapter_1.DataAdapterKey.IDLists))];
                    case 1:
                        adapterIdLists = _b.sent();
                        if (!(shouldSyncFromAdapter && typeof (adapterIdLists === null || adapterIdLists === void 0 ? void 0 : adapterIdLists.result) === 'string')) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.syncIdListsFromDataAdapter(adapter, adapterIdLists.result)];
                    case 2:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.syncIdListsFromNetwork()];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        this.logDiagnostics('config_sync', 'id_list');
                        return [2 /*return*/];
                }
            });
        });
    };
    SpecStore.prototype.updateSamplingRates = function (obj) {
        if (!obj || typeof obj !== 'object') {
            return;
        }
        this.safeSet(this.samplingRates, 'dcs', obj['dcs']);
        this.safeSet(this.samplingRates, 'idlist', obj['idlist']);
        this.safeSet(this.samplingRates, 'initialize', obj['initialize']);
        this.safeSet(this.samplingRates, 'log', obj['log']);
    };
    SpecStore.prototype.safeSet = function (samplingRates, key, value) {
        if (typeof value !== 'number') {
            return;
        }
        if (value < 0) {
            samplingRates[key] = 0;
        }
        else if (value > Diagnostics_1.MAX_SAMPLING_RATE) {
            samplingRates[key] = Diagnostics_1.MAX_SAMPLING_RATE;
        }
        else {
            samplingRates[key] = value;
        }
    };
    // returns a boolean indicating whether specsJSON has was successfully parsed
    SpecStore.prototype._process = function (specsJSON) {
        var _a;
        if (!(specsJSON === null || specsJSON === void 0 ? void 0 : specsJSON.has_updates)) {
            return false;
        }
        var updatedGates = {};
        var updatedConfigs = {};
        var updatedLayers = {};
        var gateArray = specsJSON === null || specsJSON === void 0 ? void 0 : specsJSON.feature_gates;
        var configArray = specsJSON === null || specsJSON === void 0 ? void 0 : specsJSON.dynamic_configs;
        var layersArray = specsJSON === null || specsJSON === void 0 ? void 0 : specsJSON.layer_configs;
        var layerToExperimentMap = specsJSON === null || specsJSON === void 0 ? void 0 : specsJSON.layers;
        var samplingRates = specsJSON === null || specsJSON === void 0 ? void 0 : specsJSON.diagnostics;
        this.updateSamplingRates(samplingRates);
        if (!Array.isArray(gateArray) ||
            !Array.isArray(configArray) ||
            !Array.isArray(layersArray)) {
            return false;
        }
        for (var _i = 0, gateArray_1 = gateArray; _i < gateArray_1.length; _i++) {
            var gateJSON = gateArray_1[_i];
            try {
                var gate = new ConfigSpec_1.ConfigSpec(gateJSON);
                updatedGates[gate.name] = gate;
            }
            catch (e) {
                return false;
            }
        }
        for (var _b = 0, configArray_1 = configArray; _b < configArray_1.length; _b++) {
            var configJSON = configArray_1[_b];
            try {
                var config = new ConfigSpec_1.ConfigSpec(configJSON);
                updatedConfigs[config.name] = config;
            }
            catch (e) {
                return false;
            }
        }
        for (var _c = 0, layersArray_1 = layersArray; _c < layersArray_1.length; _c++) {
            var layerJSON = layersArray_1[_c];
            try {
                var config = new ConfigSpec_1.ConfigSpec(layerJSON);
                updatedLayers[config.name] = config;
            }
            catch (e) {
                return false;
            }
        }
        var updatedExpToLayer = this._reverseLayerExperimentMapping(layerToExperimentMap);
        this.store.gates = updatedGates;
        this.store.configs = updatedConfigs;
        this.store.layers = updatedLayers;
        this.store.experimentToLayer = updatedExpToLayer;
        this.lastUpdateTime = (_a = specsJSON.time) !== null && _a !== void 0 ? _a : this.lastUpdateTime;
        return true;
    };
    /**
     * Returns a reverse mapping of layers to experiment (or vice versa)
     */
    SpecStore.prototype._reverseLayerExperimentMapping = function (layersMapping) {
        var reverseMapping = {};
        if (layersMapping != null && typeof layersMapping === 'object') {
            for (var _i = 0, _a = Object.entries(
            // @ts-ignore
            layersMapping); _i < _a.length; _i++) {
                var _b = _a[_i], layerName = _b[0], experiments = _b[1];
                // @ts-ignore
                for (var _c = 0, experiments_1 = experiments; _c < experiments_1.length; _c++) {
                    var experimentName = experiments_1[_c];
                    // experiment -> layer is a 1:1 mapping
                    reverseMapping[experimentName] = layerName;
                }
            }
        }
        return reverseMapping;
    };
    SpecStore.prototype.syncIdListsFromDataAdapter = function (dataAdapter, listsLookupString) {
        return __awaiter(this, void 0, void 0, function () {
            var lookup, tasks, _loop_1, _i, lookup_1, name;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        lookup = IDListUtil_1["default"].parseBootstrapLookup(listsLookupString);
                        if (!lookup) {
                            return [2 /*return*/];
                        }
                        tasks = [];
                        _loop_1 = function (name) {
                            tasks.push(new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                                var data;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, dataAdapter.get(IDListUtil_1["default"].getIdListDataStoreKey(name))];
                                        case 1:
                                            data = _a.sent();
                                            if (!data.result) {
                                                return [2 /*return*/];
                                            }
                                            this.store.idLists[name] = {
                                                ids: {},
                                                readBytes: 0,
                                                url: 'bootstrap',
                                                fileID: 'bootstrap',
                                                creationTime: 0
                                            };
                                            IDListUtil_1["default"].updateIdList(this.store.idLists, name, data.result);
                                            resolve();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }));
                        };
                        for (_i = 0, lookup_1 = lookup; _i < lookup_1.length; _i++) {
                            name = lookup_1[_i];
                            _loop_1(name);
                        }
                        return [4 /*yield*/, Promise.all(tasks)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SpecStore.prototype.syncIdListsFromNetwork = function () {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function () {
            var response, e_3, status, json, lookup, promises, _i, _f, _g, name, item, url, fileID, newCreationTime, oldCreationTime, newFile, fileSize, readSize, e_4;
            return __generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        this.addDiagnosticsMarker('get_id_list_sources', 'start', {
                            step: 'network_request'
                        });
                        response = null;
                        _h.label = 1;
                    case 1:
                        _h.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.fetcher.post(this.api + '/get_id_lists', {
                                statsigMetadata: getStatsigMetadata()
                            })];
                    case 2:
                        response = _h.sent();
                        this.addDiagnosticsMarker('get_id_list_sources', 'end', {
                            step: 'network_request',
                            value: response.status
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        e_3 = _h.sent();
                        status = this.getResponseCodeFromError(e_3);
                        this.addDiagnosticsMarker('get_id_list_sources', 'end', {
                            step: 'network_request',
                            value: status !== null && status !== void 0 ? status : false
                        });
                        this.outputLogger.warn(e_3);
                        return [2 /*return*/];
                    case 4:
                        _h.trys.push([4, 9, , 10]);
                        this.addDiagnosticsMarker('get_id_list_sources', 'start', {
                            step: 'process'
                        });
                        return [4 /*yield*/, response.json()];
                    case 5:
                        json = _h.sent();
                        lookup = IDListUtil_1["default"].parseLookupResponse(json);
                        this.addDiagnosticsMarker('get_id_list_sources', 'end', {
                            step: 'process'
                        });
                        if (!lookup) {
                            return [2 /*return*/];
                        }
                        promises = [];
                        for (_i = 0, _f = Object.entries(lookup); _i < _f.length; _i++) {
                            _g = _f[_i], name = _g[0], item = _g[1];
                            url = item.url;
                            fileID = item.fileID;
                            newCreationTime = item.creationTime;
                            oldCreationTime = (_b = (_a = this.store.idLists[name]) === null || _a === void 0 ? void 0 : _a.creationTime) !== null && _b !== void 0 ? _b : 0;
                            if (typeof url !== 'string' ||
                                newCreationTime < oldCreationTime ||
                                typeof fileID !== 'string') {
                                continue;
                            }
                            newFile = fileID !== ((_c = this.store.idLists[name]) === null || _c === void 0 ? void 0 : _c.fileID) &&
                                newCreationTime >= oldCreationTime;
                            if ((lookup.hasOwnProperty(name) &&
                                !this.store.idLists.hasOwnProperty(name)) ||
                                newFile // when fileID changes, we reset the whole list
                            ) {
                                this.store.idLists[name] = {
                                    ids: {},
                                    readBytes: 0,
                                    url: url,
                                    fileID: fileID,
                                    creationTime: newCreationTime
                                };
                            }
                            fileSize = (_d = item.size) !== null && _d !== void 0 ? _d : 0;
                            readSize = (_e = this.store.idLists[name].readBytes) !== null && _e !== void 0 ? _e : 0;
                            if (fileSize <= readSize) {
                                continue;
                            }
                            promises.push(this.genFetchIDList(name, url, readSize));
                        }
                        IDListUtil_1["default"].removeOldIdLists(this.store.idLists, lookup);
                        return [4 /*yield*/, Promise.allSettled(promises)];
                    case 6:
                        _h.sent();
                        if (!this.dataAdapter) return [3 /*break*/, 8];
                        return [4 /*yield*/, IDListUtil_1["default"].saveToDataAdapter(this.dataAdapter, this.store.idLists)];
                    case 7:
                        _h.sent();
                        _h.label = 8;
                    case 8: return [3 /*break*/, 10];
                    case 9:
                        e_4 = _h.sent();
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    SpecStore.prototype.genFetchIDList = function (name, url, readSize) {
        return __awaiter(this, void 0, void 0, function () {
            var res, contentLength, length, _a, _b, _c, e_5;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 3, , 4]);
                        this.addDiagnosticsMarker('get_id_list', 'start', {
                            step: 'network_request',
                            metadata: { url: url }
                        });
                        return [4 /*yield*/, (0, safeFetch_1["default"])(url, {
                                method: 'GET',
                                headers: {
                                    Range: "bytes=".concat(readSize, "-")
                                }
                            })];
                    case 1:
                        res = _d.sent();
                        this.addDiagnosticsMarker('get_id_list', 'end', {
                            step: 'network_request',
                            value: res.status,
                            metadata: { url: url }
                        });
                        this.addDiagnosticsMarker('get_id_list', 'start', {
                            step: 'process',
                            metadata: { url: url }
                        });
                        contentLength = res.headers.get('content-length');
                        if (contentLength == null) {
                            throw new Error('Content-Length for the id list is invalid.');
                        }
                        length = parseInt(contentLength);
                        if (typeof length === 'number') {
                            this.store.idLists[name].readBytes += length;
                        }
                        else {
                            delete this.store.idLists[name];
                            throw new Error('Content-Length for the id list is invalid.');
                        }
                        _b = (_a = IDListUtil_1["default"]).updateIdList;
                        _c = [this.store.idLists, name];
                        return [4 /*yield*/, res.text()];
                    case 2:
                        _b.apply(_a, _c.concat([_d.sent()]));
                        this.addDiagnosticsMarker('get_id_list', 'end', {
                            step: 'process',
                            value: true,
                            metadata: { url: url }
                        });
                        return [3 /*break*/, 4];
                    case 3:
                        e_5 = _d.sent();
                        this.outputLogger.warn(e_5);
                        this.addDiagnosticsMarker('get_id_list', 'end', {
                            step: 'process',
                            value: false,
                            metadata: { url: url }
                        });
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    SpecStore.prototype.shutdown = function () {
        var _a;
        this.clearTimers();
        (_a = this.dataAdapter) === null || _a === void 0 ? void 0 : _a.shutdown();
    };
    SpecStore.prototype.clearTimers = function () {
        if (this.syncTimer != null) {
            clearInterval(this.syncTimer);
            this.syncTimer = null;
        }
        if (this.idListsSyncTimer != null) {
            clearInterval(this.idListsSyncTimer);
            this.idListsSyncTimer = null;
        }
    };
    SpecStore.prototype.setInitialUpdateTime = function () {
        this.initialUpdateTime =
            this.lastUpdateTime === 0 ? -1 : this.lastUpdateTime;
    };
    return SpecStore;
}());
exports["default"] = SpecStore;

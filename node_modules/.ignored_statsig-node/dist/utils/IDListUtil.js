"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var IDataAdapter_1 = require("../interfaces/IDataAdapter");
var IDListUtil = /** @class */ (function () {
    function IDListUtil() {
    }
    // Typecheck the response from the network
    IDListUtil.parseLookupResponse = function (input) {
        if (typeof (input !== null && input !== void 0 ? input : undefined) !== 'object') {
            return null;
        }
        return input;
    };
    IDListUtil.parseBootstrapLookup = function (input) {
        try {
            var result = JSON.parse(input);
            if (Array.isArray(result)) {
                return result;
            }
        }
        catch (error) { }
        return null;
    };
    // Run any additions/subtractions from the ID lists file
    IDListUtil.updateIdList = function (lists, name, data) {
        var lines = data.split(/\r?\n/);
        if (data.charAt(0) !== '+' && data.charAt(0) !== '-') {
            delete lists[name];
            throw new Error('Seek range invalid.');
        }
        for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
            var line = lines_1[_i];
            if (line.length <= 1) {
                continue;
            }
            var id = line.slice(1).trim();
            if (line.charAt(0) === '+') {
                lists[name].ids[id] = true;
            }
            else if (line.charAt(0) === '-') {
                delete lists[name].ids[id];
            }
        }
    };
    // Remove any old ID lists that are no longer in the Lookup
    IDListUtil.removeOldIdLists = function (lists, lookup) {
        var deletedLists = [];
        for (var name in lists) {
            if (lists.hasOwnProperty(name) && !lookup.hasOwnProperty(name)) {
                deletedLists.push(name);
            }
        }
        for (var name in deletedLists) {
            delete lists[name];
        }
    };
    IDListUtil.getIdListDataStoreKey = function (name) {
        return "".concat(IDataAdapter_1.DataAdapterKey.IDLists, "::").concat(name);
    };
    IDListUtil.saveToDataAdapter = function (dataAdapter, lists) {
        return __awaiter(this, void 0, void 0, function () {
            var tasks, _i, _a, _b, key, value, ids, prop;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        tasks = [];
                        for (_i = 0, _a = Object.entries(lists); _i < _a.length; _i++) {
                            _b = _a[_i], key = _b[0], value = _b[1];
                            ids = '';
                            for (prop in value.ids) {
                                if (!value.ids.hasOwnProperty(prop))
                                    continue;
                                ids += "+".concat(prop, "\n");
                            }
                            tasks.push(dataAdapter.set(this.getIdListDataStoreKey(key), ids));
                        }
                        return [4 /*yield*/, Promise.all(tasks)];
                    case 1:
                        _c.sent();
                        return [4 /*yield*/, dataAdapter.set(IDataAdapter_1.DataAdapterKey.IDLists, JSON.stringify(Object.keys(lists)))];
                    case 2:
                        _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return IDListUtil;
}());
exports["default"] = IDListUtil;

"use strict";
exports.__esModule = true;
exports.ConfigCondition = exports.ConfigRule = exports.ConfigSpec = void 0;
var ConfigSpec = /** @class */ (function () {
    function ConfigSpec(specJSON) {
        this.name = specJSON.name;
        this.type = specJSON.type;
        this.salt = specJSON.salt;
        this.defaultValue = specJSON.defaultValue;
        this.enabled = specJSON.enabled;
        this.idType = specJSON.idType;
        this.rules = this.parseRules(specJSON.rules);
        this.entity = specJSON.entity;
        this.explicitParameters = specJSON.explicitParameters;
        if (specJSON.isActive !== null) {
            this.isActive = specJSON.isActive;
        }
        this.hasSharedParams =
            specJSON.hasSharedParams != null
                ? specJSON.hasSharedParams === true
                : false;
    }
    ConfigSpec.prototype.parseRules = function (rulesJSON) {
        var json = rulesJSON;
        var rules = [];
        for (var i = 0; i < json.length; i++) {
            var rule = new ConfigRule(json[i]);
            rules.push(rule);
        }
        return rules;
    };
    return ConfigSpec;
}());
exports.ConfigSpec = ConfigSpec;
var ConfigRule = /** @class */ (function () {
    function ConfigRule(ruleJSON) {
        var _a, _b;
        this.name = ruleJSON.name;
        this.passPercentage = ruleJSON.passPercentage;
        this.conditions = this.parseConditions(ruleJSON.conditions);
        this.returnValue = ruleJSON.returnValue;
        this.id = ruleJSON.id;
        this.salt = ruleJSON.salt;
        this.idType = ruleJSON.idType;
        this.configDelegate = (_a = ruleJSON.configDelegate) !== null && _a !== void 0 ? _a : null;
        this.groupName = (_b = ruleJSON.groupName) !== null && _b !== void 0 ? _b : '';
        if (ruleJSON.isExperimentGroup !== null) {
            this.isExperimentGroup = ruleJSON.isExperimentGroup;
        }
    }
    ConfigRule.prototype.parseConditions = function (conditionsJSON) {
        var json = conditionsJSON;
        var conditions = [];
        json === null || json === void 0 ? void 0 : json.forEach(function (cJSON) {
            var condition = new ConfigCondition(cJSON);
            conditions.push(condition);
        });
        return conditions;
    };
    return ConfigRule;
}());
exports.ConfigRule = ConfigRule;
var ConfigCondition = /** @class */ (function () {
    function ConfigCondition(conditionJSON) {
        var _a;
        this.type = conditionJSON.type;
        this.targetValue = conditionJSON.targetValue;
        this.operator = conditionJSON.operator;
        this.field = conditionJSON.field;
        this.additionalValues =
            (_a = conditionJSON.additionalValues) !== null && _a !== void 0 ? _a : {};
        this.idType = conditionJSON.idType;
    }
    return ConfigCondition;
}());
exports.ConfigCondition = ConfigCondition;

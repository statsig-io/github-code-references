"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var _a = require('./utils/core'), getStatsigMetadata = _a.getStatsigMetadata, poll = _a.poll;
var Errors_1 = require("./Errors");
var LogEvent_1 = __importDefault(require("./LogEvent"));
var CONFIG_EXPOSURE_EVENT = 'config_exposure';
var LAYER_EXPOSURE_EVENT = 'layer_exposure';
var GATE_EXPOSURE_EVENT = 'gate_exposure';
var DIAGNOSTIC_EVENT = 'diagnostics';
var INTERNAL_EVENT_PREFIX = 'statsig::';
var DEFAULT_VALUE_WARNING = 'default_value_type_mismatch';
var deduperInterval = 60 * 1000;
var ignoredMetadataKeys = new Set([
    'serverTime',
    'configSyncTime',
    'initTime',
    'reason',
]);
var LogEventProcessor = /** @class */ (function () {
    function LogEventProcessor(fetcher, options) {
        this.options = options;
        this.fetcher = fetcher;
        this.queue = [];
        this.deduper = new Set();
        this.loggedErrors = new Set();
        var processor = this;
        this.flushTimer = poll(function () {
            processor.flush();
        }, options.loggingIntervalMs);
        this.deduperTimer = poll(function () {
            processor.deduper.clear();
        }, deduperInterval);
    }
    LogEventProcessor.prototype.log = function (event, errorKey) {
        if (errorKey === void 0) { errorKey = null; }
        if (this.options.localMode) {
            return;
        }
        if (!(event instanceof LogEvent_1["default"])) {
            return;
        }
        if (!event.validate()) {
            return;
        }
        if (errorKey != null) {
            if (this.loggedErrors.has(errorKey)) {
                return;
            }
            this.loggedErrors.add(errorKey);
        }
        this.queue.push(event);
        if (this.queue.length >= this.options.loggingMaxBufferSize) {
            this.flush();
        }
    };
    LogEventProcessor.prototype.flush = function (fireAndForget) {
        if (fireAndForget === void 0) { fireAndForget = false; }
        return __awaiter(this, void 0, void 0, function () {
            var oldQueue, body;
            var _this = this;
            return __generator(this, function (_a) {
                if (this.queue.length === 0) {
                    return [2 /*return*/, Promise.resolve()];
                }
                oldQueue = this.queue;
                this.queue = [];
                body = {
                    statsigMetadata: getStatsigMetadata(),
                    events: oldQueue
                };
                return [2 /*return*/, this.fetcher
                        .post(this.options.api + '/log_event', body, fireAndForget ? 0 : this.options.postLogsRetryLimit, this.options.postLogsRetryBackoff)
                        .then(function () {
                        return Promise.resolve();
                    })["catch"](function (e) {
                        if (!fireAndForget && !(e instanceof Errors_1.StatsigLocalModeNetworkError)) {
                            _this.logStatsigInternal(null, 'log_event_failed', {
                                error: (e === null || e === void 0 ? void 0 : e.message) || 'log_event_failed'
                            });
                        }
                        return Promise.resolve();
                    })];
            });
        });
    };
    LogEventProcessor.prototype.shutdown = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.flushTimer != null) {
                    clearTimeout(this.flushTimer);
                    this.flushTimer = null;
                }
                if (this.deduperTimer != null) {
                    clearTimeout(this.deduperTimer);
                    this.deduperTimer = null;
                }
                return [2 /*return*/, this.flush(true)];
            });
        });
    };
    LogEventProcessor.prototype.logStatsigInternal = function (user, eventName, metadata, secondaryExposures, value) {
        if (secondaryExposures === void 0) { secondaryExposures = null; }
        if (value === void 0) { value = null; }
        if (!this.isUniqueExposure(user, eventName, metadata)) {
            return;
        }
        var event = new LogEvent_1["default"](INTERNAL_EVENT_PREFIX + eventName);
        if (user != null) {
            event.setUser(user);
        }
        if (metadata != null) {
            event.setMetadata(metadata);
        }
        if (secondaryExposures != null) {
            event.setSecondaryExposures(secondaryExposures);
        }
        if (value != null) {
            event.setValue(value);
        }
        if ((metadata === null || metadata === void 0 ? void 0 : metadata.error) != null) {
            this.log(event, eventName + metadata.error);
        }
        else {
            this.log(event);
        }
    };
    LogEventProcessor.prototype.logGateExposure = function (user, gateName, evaluation, isManualExposure) {
        var metadata = {
            gate: gateName,
            gateValue: String(evaluation.value),
            ruleID: evaluation.rule_id
        };
        this.maybeAddManualExposureFlagToMetadata(metadata, isManualExposure);
        this.safeAddEvaulationDetailsToEvent(metadata, evaluation.evaluation_details);
        this.logStatsigInternal(user, GATE_EXPOSURE_EVENT, metadata, evaluation.secondary_exposures);
    };
    LogEventProcessor.prototype.logConfigExposure = function (user, configName, evaluation, isManualExposure) {
        var metadata = {
            config: configName,
            ruleID: evaluation.rule_id
        };
        this.maybeAddManualExposureFlagToMetadata(metadata, isManualExposure);
        this.safeAddEvaulationDetailsToEvent(metadata, evaluation.evaluation_details);
        this.logStatsigInternal(user, CONFIG_EXPOSURE_EVENT, metadata, evaluation.secondary_exposures);
    };
    LogEventProcessor.prototype.logLayerExposure = function (user, layerName, parameterName, evaluation, isManualExposure) {
        var _a, _b, _c;
        var allocatedExperiment = '';
        var exposures = evaluation.undelegated_secondary_exposures;
        var isExplicit = (_b = (_a = evaluation.explicit_parameters) === null || _a === void 0 ? void 0 : _a.includes(parameterName)) !== null && _b !== void 0 ? _b : false;
        if (isExplicit) {
            allocatedExperiment = (_c = evaluation.config_delegate) !== null && _c !== void 0 ? _c : '';
            exposures = evaluation.secondary_exposures;
        }
        var metadata = {
            config: layerName,
            ruleID: evaluation.rule_id,
            allocatedExperiment: allocatedExperiment,
            parameterName: parameterName,
            isExplicitParameter: String(isExplicit)
        };
        this.maybeAddManualExposureFlagToMetadata(metadata, isManualExposure);
        this.safeAddEvaulationDetailsToEvent(metadata, evaluation.evaluation_details);
        this.logStatsigInternal(user, LAYER_EXPOSURE_EVENT, metadata, exposures);
    };
    LogEventProcessor.prototype.logConfigDefaultValueFallback = function (user, message, metadata) {
        this.logStatsigInternal(user, DEFAULT_VALUE_WARNING, metadata, null, message);
    };
    LogEventProcessor.prototype.maybeAddManualExposureFlagToMetadata = function (metadata, isManualExposure) {
        if (!isManualExposure) {
            return;
        }
        metadata['isManualExposure'] = 'true';
    };
    LogEventProcessor.prototype.safeAddEvaulationDetailsToEvent = function (metadata, evaluationDetails) {
        if (!evaluationDetails) {
            return;
        }
        metadata['reason'] = evaluationDetails.reason;
        metadata['configSyncTime'] = evaluationDetails.configSyncTime;
        metadata['initTime'] = evaluationDetails.initTime;
        metadata['serverTime'] = evaluationDetails.serverTime;
    };
    LogEventProcessor.prototype.isUniqueExposure = function (user, eventName, metadata) {
        if (user == null) {
            return true;
        }
        var customIdKey = '';
        if (user.customIDs && typeof user.customIDs === 'object') {
            customIdKey = Object.values(user.customIDs).join();
        }
        var metadataKey = '';
        if (metadata && typeof metadata === 'object') {
            metadataKey = Object.entries(metadata)
                .filter(function (_a) {
                var key = _a[0], _value = _a[1];
                return !ignoredMetadataKeys.has(key);
            })
                .map(function (_a) {
                var _key = _a[0], value = _a[1];
                return value;
            })
                .join();
        }
        var keyList = [user.userID, customIdKey, eventName, metadataKey];
        var key = keyList.join();
        if (this.deduper.has(key)) {
            return false;
        }
        this.deduper.add(key);
        if (this.deduper.size > 100000) {
            this.deduper.clear();
        }
        return true;
    };
    LogEventProcessor.prototype.logDiagnosticsEvent = function (diagnostics, user) {
        if (user === void 0) { user = null; }
        if (diagnostics.markers.length === 0) {
            return;
        }
        this.logStatsigInternal(user, DIAGNOSTIC_EVENT, diagnostics);
    };
    return LogEventProcessor;
}());
exports["default"] = LogEventProcessor;

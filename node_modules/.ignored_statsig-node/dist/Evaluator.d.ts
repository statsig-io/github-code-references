import ConfigEvaluation from './ConfigEvaluation';
import { ConfigCondition, ConfigRule, ConfigSpec } from './ConfigSpec';
import Diagnostics from './Diagnostics';
import { ExplicitStatsigOptions } from './StatsigOptions';
import { StatsigUser } from './StatsigUser';
import StatsigFetcher from './utils/StatsigFetcher';
export default class Evaluator {
    private gateOverrides;
    private configOverrides;
    private layerOverrides;
    private initialized;
    private store;
    private initStrategyForIP3Country;
    constructor(fetcher: StatsigFetcher, options: ExplicitStatsigOptions, diagnostics: Diagnostics);
    init(): Promise<void>;
    overrideGate(gateName: string, value: boolean, userID?: string | null): void;
    overrideConfig(configName: string, value: Record<string, unknown>, userID?: string | null): void;
    overrideLayer(layerName: string, value: Record<string, unknown>, userID?: string | null): void;
    checkGate(user: StatsigUser, gateName: string): ConfigEvaluation;
    getConfig(user: StatsigUser, configName: string): ConfigEvaluation;
    getLayer(user: StatsigUser, layerName: string): ConfigEvaluation;
    getClientInitializeResponse(user: StatsigUser): Record<string, unknown> | null;
    resetSyncTimerIfExited(): Error | null;
    getExperimentList(): string[];
    getFeatureGateList(): string[];
    private lookupGateOverride;
    private lookupConfigOverride;
    private lookupLayerOverride;
    private lookupConfigBasedOverride;
    private _specToInitializeResponse;
    private _cleanExposures;
    shutdown(): void;
    _evalConfig(user: StatsigUser, config: ConfigSpec | null): ConfigEvaluation;
    _eval(user: StatsigUser, config: ConfigSpec): ConfigEvaluation;
    _evalDelegate(user: StatsigUser, rule: ConfigRule, exposures: Record<string, string>[]): ConfigEvaluation | null;
    _evalPassPercent(user: StatsigUser, rule: ConfigRule, config: ConfigSpec): boolean;
    _getUnitID(user: StatsigUser, idType: string): unknown;
    _evalRule(user: StatsigUser, rule: ConfigRule): ConfigEvaluation;
    _evalCondition(user: StatsigUser, condition: ConfigCondition): {
        passes: boolean;
        fetchFromServer?: boolean;
        exposures?: any[];
    };
    _isExperimentActive(experimentConfig: ConfigSpec | null): boolean;
    _isUserAllocatedToExperiment(user: StatsigUser, experimentConfig: ConfigSpec | null): boolean;
    private getFromIP;
    ip2country(ip: string | number): string | null;
}

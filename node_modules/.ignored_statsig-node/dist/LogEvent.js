"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var OutputLogger_1 = __importDefault(require("./OutputLogger"));
var core_1 = require("./utils/core");
var LogEvent = /** @class */ (function () {
    function LogEvent(eventName) {
        this.user = null;
        this.value = null;
        this.metadata = null;
        this.secondaryExposures = [];
        this.outputLogger = OutputLogger_1["default"].getLogger();
        if (eventName == null || typeof eventName !== 'string') {
            this.outputLogger.error('statsigSDK> EventName needs to be a string.');
            eventName = 'invalid_event';
        }
        this.time = Date.now();
        this.eventName = eventName;
    }
    LogEvent.prototype.setUser = function (user) {
        if (user != null && typeof user !== 'object') {
            this.outputLogger.warn('statsigSDK> User is not set because it needs to be an object.');
            return;
        }
        this.user = (0, core_1.clone)(user);
        if (this.user != null) {
            this.user.privateAttributes = null;
        }
    };
    LogEvent.prototype.setValue = function (value) {
        if (value == null) {
            return;
        }
        if (typeof value === 'object') {
            this.value = JSON.stringify(value);
        }
        else if (typeof value === 'number') {
            this.value = value;
        }
        else {
            this.value = value.toString();
        }
    };
    LogEvent.prototype.setMetadata = function (metadata) {
        if (metadata == null) {
            return;
        }
        if (metadata != null && typeof metadata !== 'object') {
            this.outputLogger.warn('statsigSDK> Metadata is not set because it needs to be an object.');
            return;
        }
        this.metadata = (0, core_1.clone)(metadata);
    };
    LogEvent.prototype.setTime = function (time) {
        if (time != null && typeof time !== 'number') {
            this.outputLogger.warn('statsigSDK>Timestamp is not set because it needs to be a number.');
            return;
        }
        this.time = time;
    };
    LogEvent.prototype.setSecondaryExposures = function (exposures) {
        this.secondaryExposures = Array.isArray(exposures) ? exposures : [];
    };
    LogEvent.prototype.validate = function () {
        return typeof this.eventName === 'string' && this.eventName.length > 0;
    };
    LogEvent.prototype.toObject = function () {
        return {
            eventName: this.eventName,
            metadata: this.metadata,
            time: this.time,
            user: this.user,
            value: this.value,
            secondaryExposures: this.secondaryExposures
        };
    };
    return LogEvent;
}());
exports["default"] = LogEvent;

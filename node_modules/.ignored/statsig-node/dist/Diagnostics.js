"use strict";
exports.__esModule = true;
exports.MAX_SAMPLING_RATE = void 0;
var core_1 = require("./utils/core");
exports.MAX_SAMPLING_RATE = 10000;
var Diagnostics = /** @class */ (function () {
    function Diagnostics(args) {
        var _a, _b, _c, _d;
        this.logger = args.logger;
        this.markers = (_a = args.markers) !== null && _a !== void 0 ? _a : {
            initialize: [],
            config_sync: [],
            event_logging: []
        };
        this.disable = (_c = (_b = args.options) === null || _b === void 0 ? void 0 : _b.disableDiagnostics) !== null && _c !== void 0 ? _c : false;
        this.options = (_d = args.options) !== null && _d !== void 0 ? _d : {};
    }
    Diagnostics.prototype.mark = function (context, key, action, step, value, metadata) {
        if (this.disable) {
            return;
        }
        var marker = {
            key: key,
            action: action,
            step: step !== null && step !== void 0 ? step : null,
            value: value !== null && value !== void 0 ? value : null,
            timestamp: Date.now(),
            metadata: metadata
        };
        this.addMarker(context, marker);
    };
    Diagnostics.prototype.addMarker = function (context, marker) {
        this.markers[context].push(marker);
    };
    Diagnostics.prototype.logDiagnostics = function (context, optionalArgs) {
        if (this.disable) {
            return;
        }
        var shouldLog = !optionalArgs
            ? true
            : this.getShouldLogDiagnostics(optionalArgs.type, optionalArgs.samplingRates);
        if (shouldLog) {
            this.logger.logDiagnosticsEvent({
                context: context,
                markers: this.markers[context],
                initTimeoutMs: this.options.initTimeoutMs
            });
        }
        this.markers[context] = [];
    };
    Diagnostics.prototype.getShouldLogDiagnostics = function (type, samplingRates) {
        var rand = Math.random() * exports.MAX_SAMPLING_RATE;
        switch (type) {
            case 'id_list':
                return rand < samplingRates.idlist;
            case 'config_spec':
                return rand < samplingRates.dcs;
            case 'initialize':
                return rand < samplingRates.initialize;
            default:
                throw new core_1.ExhaustSwitchError(type);
        }
    };
    return Diagnostics;
}());
exports["default"] = Diagnostics;

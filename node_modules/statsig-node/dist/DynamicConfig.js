"use strict";
exports.__esModule = true;
var core_1 = require("./utils/core");
/**
 * Returns the data for a DynamicConfig in the statsig console via typed get functions
 */
var DynamicConfig = /** @class */ (function () {
    function DynamicConfig(configName, value, ruleID, groupName, secondaryExposures, onDefaultValueFallback) {
        if (value === void 0) { value = {}; }
        if (ruleID === void 0) { ruleID = ''; }
        if (groupName === void 0) { groupName = null; }
        if (secondaryExposures === void 0) { secondaryExposures = []; }
        if (onDefaultValueFallback === void 0) { onDefaultValueFallback = null; }
        var _a;
        this._onDefaultValueFallback = null;
        if (typeof configName !== 'string' || configName.length === 0) {
            configName = '';
        }
        if (value == null || typeof value !== 'object') {
            value = {};
        }
        this.name = configName;
        this.value = (_a = (0, core_1.clone)(value)) !== null && _a !== void 0 ? _a : {};
        this._ruleID = ruleID;
        this._groupName = groupName;
        this._secondaryExposures = Array.isArray(secondaryExposures)
            ? secondaryExposures
            : [];
        this._onDefaultValueFallback = onDefaultValueFallback;
    }
    DynamicConfig.prototype.get = function (key, defaultValue, typeGuard) {
        var _a, _b;
        if (typeGuard === void 0) { typeGuard = null; }
        // @ts-ignore
        defaultValue = defaultValue !== null && defaultValue !== void 0 ? defaultValue : null;
        // @ts-ignore
        var val = this.getValue(key, defaultValue);
        if (val == null) {
            return defaultValue;
        }
        var expectedType = (0, core_1.getTypeOf)(defaultValue);
        var actualType = (0, core_1.getTypeOf)(val);
        if (typeGuard != null) {
            if (typeGuard(val)) {
                return val;
            }
            (_a = this._onDefaultValueFallback) === null || _a === void 0 ? void 0 : _a.call(this, this, key, expectedType, actualType);
            return defaultValue;
        }
        if (defaultValue == null || expectedType === actualType) {
            return val;
        }
        (_b = this._onDefaultValueFallback) === null || _b === void 0 ? void 0 : _b.call(this, this, key, expectedType, actualType);
        return defaultValue;
    };
    DynamicConfig.prototype.getValue = function (key, defaultValue) {
        var _a;
        if (key == null) {
            return this.value;
        }
        if (defaultValue === undefined) {
            defaultValue = null;
        }
        return (_a = this.value[key]) !== null && _a !== void 0 ? _a : defaultValue;
    };
    DynamicConfig.prototype.getRuleID = function () {
        return this._ruleID;
    };
    DynamicConfig.prototype.getGroupName = function () {
        return this._groupName;
    };
    DynamicConfig.prototype._getSecondaryExposures = function () {
        return this._secondaryExposures;
    };
    return DynamicConfig;
}());
exports["default"] = DynamicConfig;

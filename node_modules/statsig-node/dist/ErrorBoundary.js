"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.ExceptionEndpoint = void 0;
var Errors_1 = require("./Errors");
var OutputLogger_1 = __importDefault(require("./OutputLogger"));
var core_1 = require("./utils/core");
var safeFetch_1 = __importDefault(require("./utils/safeFetch"));
exports.ExceptionEndpoint = 'https://statsigapi.net/v1/sdk_exception';
var ErrorBoundary = /** @class */ (function () {
    function ErrorBoundary(sdkKey) {
        this.statsigMetadata = (0, core_1.getStatsigMetadata)();
        this.seen = new Set();
        this.outputLogger = OutputLogger_1["default"].getLogger();
        this.sdkKey = sdkKey;
    }
    ErrorBoundary.prototype.swallow = function (task) {
        this.capture(task, function () {
            return undefined;
        });
    };
    ErrorBoundary.prototype.capture = function (task, recover) {
        var _this = this;
        try {
            var result = task();
            if (result instanceof Promise) {
                return result["catch"](function (e) {
                    return _this.onCaught(e, recover);
                });
            }
            return result;
        }
        catch (error) {
            return this.onCaught(error, recover);
        }
    };
    ErrorBoundary.prototype.setup = function (sdkKey) {
        this.sdkKey = sdkKey;
    };
    ErrorBoundary.prototype.onCaught = function (error, recover) {
        if (error instanceof Errors_1.StatsigUninitializedError ||
            error instanceof Errors_1.StatsigInvalidArgumentError ||
            error instanceof Errors_1.StatsigTooManyRequestsError) {
            throw error; // Don't catch these
        }
        this.outputLogger.error('[Statsig] An unexpected exception occurred.', error);
        this.logError(error);
        return recover();
    };
    ErrorBoundary.prototype.logError = function (error, key) {
        var _a;
        try {
            if (!this.sdkKey) {
                return;
            }
            var unwrapped = (error !== null && error !== void 0 ? error : Error('[Statsig] Error was empty'));
            var isError = unwrapped instanceof Error;
            var name = isError && unwrapped.name ? unwrapped.name : 'No Name';
            if (this.seen.has(name) || (key != null && this.seen.has(key))) {
                return;
            }
            this.seen.add(name);
            var info = isError ? unwrapped.stack : this.getDescription(unwrapped);
            var body = JSON.stringify({
                exception: name,
                info: info,
                statsigMetadata: (_a = this.statsigMetadata) !== null && _a !== void 0 ? _a : {}
            });
            (0, safeFetch_1["default"])(exports.ExceptionEndpoint, {
                method: 'POST',
                headers: {
                    'STATSIG-API-KEY': this.sdkKey,
                    'STATSIG-SDK-TYPE': (0, core_1.getSDKType)(),
                    'STATSIG-SDK-VERSION': (0, core_1.getSDKVersion)(),
                    'Content-Type': 'application/json',
                    'Content-Length': "".concat(body.length)
                },
                body: body
            })["catch"](function () { });
        }
        catch (_error) {
            /* noop */
        }
    };
    ErrorBoundary.prototype.getDescription = function (obj) {
        try {
            return JSON.stringify(obj);
        }
        catch (_a) {
            return '[Statsig] Failed to get string for error.';
        }
    };
    return ErrorBoundary;
}());
exports["default"] = ErrorBoundary;

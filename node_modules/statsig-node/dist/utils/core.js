"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.ExhaustSwitchError = exports.getTypeOf = exports.poll = exports.notEmpty = exports.isUserIdentifiable = exports.getStatsigMetadata = exports.getSDKType = exports.getSDKVersion = exports.getNumericValue = exports.getBoolValue = exports.generateID = exports.clone = void 0;
var uuid_1 = require("uuid");
function getSDKVersion() {
    var _a, _b;
    try {
        return (_b = (_a = require('../../package.json')) === null || _a === void 0 ? void 0 : _a.version) !== null && _b !== void 0 ? _b : '';
    }
    catch (err) {
        return '';
    }
}
exports.getSDKVersion = getSDKVersion;
function getSDKType() {
    var _a, _b;
    try {
        return (_b = (_a = require('../../package.json')) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'statsig-node';
    }
    catch (err) {
        return 'statsig-node';
    }
}
exports.getSDKType = getSDKType;
function notEmpty(value) {
    return value !== null && value !== undefined;
}
exports.notEmpty = notEmpty;
function generateID() {
    return (0, uuid_1.v4)();
}
exports.generateID = generateID;
function clone(obj) {
    if (obj == null) {
        return null;
    }
    return JSON.parse(JSON.stringify(obj));
}
exports.clone = clone;
// Return a number if num can be parsed to a number, otherwise return null
function getNumericValue(num) {
    if (num == null) {
        return null;
    }
    var n = Number(num);
    if (typeof n === 'number' && !isNaN(n) && isFinite(n) && num != null) {
        return n;
    }
    return null;
}
exports.getNumericValue = getNumericValue;
// Return the boolean value of the input if it can be casted into a boolean, null otherwise
function getBoolValue(val) {
    if (val == null) {
        return null;
    }
    else if (String(val).toLowerCase() === 'true') {
        return true;
    }
    else if (String(val).toLowerCase() === 'false') {
        return false;
    }
    return null;
}
exports.getBoolValue = getBoolValue;
function getStatsigMetadata(extra) {
    if (extra === void 0) { extra = {}; }
    return __assign({ sdkType: getSDKType(), sdkVersion: getSDKVersion(), languageVersion: (typeof process !== 'undefined' &&
            process &&
            process.version &&
            process.version.length > 1 &&
            process.version.substring(1)) ||
            '' }, extra);
}
exports.getStatsigMetadata = getStatsigMetadata;
function isUserIdentifiable(user) {
    if (user == null)
        return false;
    if (typeof user !== 'object')
        return false;
    var userID = user.userID;
    var customIDs = user.customIDs;
    return (typeof userID === 'number' ||
        typeof userID === 'string' ||
        (customIDs != null &&
            typeof customIDs === 'object' &&
            Object.keys(customIDs).length !== 0));
}
exports.isUserIdentifiable = isUserIdentifiable;
function poll(fn, interval) {
    var timer = setInterval(fn, interval);
    if (timer.unref) {
        timer.unref();
    }
    return timer;
}
exports.poll = poll;
function getTypeOf(value) {
    return Array.isArray(value) ? 'array' : typeof value;
}
exports.getTypeOf = getTypeOf;
var ExhaustSwitchError = /** @class */ (function (_super) {
    __extends(ExhaustSwitchError, _super);
    function ExhaustSwitchError(x) {
        return _super.call(this, "Unreachable case: ".concat(JSON.stringify(x))) || this;
    }
    return ExhaustSwitchError;
}(Error));
exports.ExhaustSwitchError = ExhaustSwitchError;

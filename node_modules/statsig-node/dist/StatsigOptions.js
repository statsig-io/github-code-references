"use strict";
exports.__esModule = true;
exports.OptionsWithDefaults = void 0;
var DEFAULT_API = 'https://statsigapi.net/v1';
var DEFAULT_RULESETS_SYNC_INTERVAL = 10 * 1000;
var MIN_RULESETS_SYNC_INTERVAL = 5 * 1000;
var DEFAULT_ID_LISTS_SYNC_INTERVAL = 60 * 1000;
var MIN_ID_LISTS_SYNC_INTERVAL = 30 * 1000;
var DEFAULT_LOGGING_INTERVAL = 60 * 1000;
var DEFAULT_MAX_LOGGING_BUFFER_SIZE = 1000;
var DEFAULT_LOG_DIAGNOSTICS = false;
var DEFAULT_POST_LOGS_RETRY_LIMIT = 5;
var DEFAULT_POST_LOGS_RETRY_BACKOFF = 1000;
function OptionsWithDefaults(opts) {
    var _a, _b, _c, _d, _e, _f;
    return {
        api: normalizeUrl((_a = getString(opts, 'api', DEFAULT_API)) !== null && _a !== void 0 ? _a : DEFAULT_API),
        apiForDownloadConfigSpecs: normalizeUrl(getString(opts, 'apiForDownloadConfigSpecs', null)),
        bootstrapValues: getString(opts, 'bootstrapValues', null),
        environment: opts.environment
            ? getObject(opts, 'environment', {})
            : null,
        rulesUpdatedCallback: opts.rulesUpdatedCallback
            ? getFunction(opts, 'rulesUpdatedCallback')
            : null,
        localMode: getBoolean(opts, 'localMode', false),
        initTimeoutMs: getNumber(opts, 'initTimeoutMs', 0),
        logger: (_b = opts.logger) !== null && _b !== void 0 ? _b : console,
        dataAdapter: (_c = opts.dataAdapter) !== null && _c !== void 0 ? _c : null,
        rulesetsSyncIntervalMs: Math.max(getNumber(opts, 'rulesetsSyncIntervalMs', DEFAULT_RULESETS_SYNC_INTERVAL), MIN_RULESETS_SYNC_INTERVAL),
        idListsSyncIntervalMs: Math.max(getNumber(opts, 'idListsSyncIntervalMs', DEFAULT_ID_LISTS_SYNC_INTERVAL), MIN_ID_LISTS_SYNC_INTERVAL),
        loggingIntervalMs: getNumber(opts, 'loggingIntervalMs', DEFAULT_LOGGING_INTERVAL),
        loggingMaxBufferSize: Math.min(getNumber(opts, 'loggingMaxBufferSize', DEFAULT_MAX_LOGGING_BUFFER_SIZE), DEFAULT_MAX_LOGGING_BUFFER_SIZE),
        disableDiagnostics: getBoolean(opts, 'disableDiagnostics', DEFAULT_LOG_DIAGNOSTICS),
        initStrategyForIP3Country: (_d = getString(opts, 'initStrategyForIP3Country', 'await')) !== null && _d !== void 0 ? _d : 'await',
        initStrategyForIDLists: (_e = getString(opts, 'initStrategyForIDLists', 'await')) !== null && _e !== void 0 ? _e : 'await',
        postLogsRetryLimit: getNumber(opts, 'postLogsRetryLimit', DEFAULT_POST_LOGS_RETRY_LIMIT),
        postLogsRetryBackoff: (_f = opts.postLogsRetryBackoff) !== null && _f !== void 0 ? _f : DEFAULT_POST_LOGS_RETRY_BACKOFF
    };
}
exports.OptionsWithDefaults = OptionsWithDefaults;
function getBoolean(inputOptions, index, defaultValue) {
    var b = inputOptions[index];
    if (b == null || typeof b !== 'boolean') {
        return defaultValue;
    }
    return b;
}
function getString(inputOptions, index, defaultValue) {
    var str = inputOptions[index];
    if (str == null || typeof str !== 'string') {
        return defaultValue;
    }
    return str;
}
function getObject(inputOptions, index, defaultValue) {
    var obj = inputOptions[index];
    if (obj == null || typeof obj !== 'object') {
        return defaultValue;
    }
    return obj;
}
function getFunction(inputOptions, index) {
    var func = inputOptions[index];
    if (func == null || typeof func !== 'function') {
        return null;
    }
    return func;
}
function getNumber(inputOptions, index, defaultValue) {
    var obj = inputOptions[index];
    if (obj == null || typeof obj !== 'number') {
        return defaultValue;
    }
    return obj;
}
function normalizeUrl(url) {
    return url && url.endsWith('/') ? url.slice(0, -1) : url;
}
